#include <tinyml.h>

Eloquent::TF::Sequential<TF_NUM_OPS, ARENA_SIZE> tf;

// 20250311 shoulder classification model 0.89 (with augmentations)
float positive[270] = { -0.4970, -0.5071, 0.5794, -0.4361, -1.2353, -0.4970, -0.5339, -0.8133, 1.0425, -0.4529, -0.4963, 0.5533, -0.4394, -1.2644, -0.4814, -0.5265, -0.8229, 1.0765, -0.3886, -0.4822, 0.5093, -0.4123, -1.2615, -0.4628, -0.5200, -0.7496, 1.0363, -0.2746, -0.4715, 0.4624, -0.4298, -1.2435, -0.4373, -0.4880, -0.6635, 1.0363, -0.2172, -0.4621, 0.4453, -0.4465, -1.1974, -0.4182, -0.4600, -0.6575, 1.0363, -0.1995, -0.3842, 0.4255, -0.4697, -1.1379, -0.3180, -0.4486, -0.5729, 1.0250, -0.1959, -0.2125, 0.3789, -0.5052, -1.0639, -0.1052, -0.4490, -0.3599, 0.9963, -0.1168, -0.0654, 0.2863, -0.5606, -0.9058, 0.0697, -0.3805, -0.3520, 0.9556, 0.0162, 0.0418, 0.1048, -0.6638, -0.8432, 0.2326, -0.2458, -0.1306, 0.9593, 0.3717, 0.4338, -0.1744, -0.4126, -0.5927, 0.5598, 0.1390, 0.4666, 0.9799, 0.9060, 0.9916, -0.4435, 0.1647, -0.1346, 0.9662, 0.6457, 1.2032, 1.0010, 1.3846, 1.1754, -0.4233, 0.7012, 0.3735, 1.1070, 0.8142, 1.3599, 1.0010, 2.3804, 1.6821, -1.2965, 1.5831, 1.4424, 1.1772, 0.9221, 0.8665, 0.8508, 2.4668, 1.7795, -1.8237, 1.7497, 2.2565, 1.4690, 1.3403, 1.2101, 0.7133, 1.9735, 1.5702, -1.9420, 1.7150, 2.4511, 1.6864, 1.7428, 1.8468, 0.4898, 1.4651, 1.2760, -1.7388, 2.1651, 1.7385, 1.4639, 1.7187, 1.9626, 0.0610, 0.6923, 1.1355, -1.5097, 1.4121, 1.0979, 1.2808, 1.7833, 1.7197, -0.1561, 0.0374, 0.9814, -1.1906, 1.0247, 0.4211, 0.9691, 1.4485, 1.2946, -0.5214, -0.4525, 0.7237, -0.8449, 0.7607, -0.0097, 0.6081, 1.0024, 0.7362, -0.8375, -0.7484, 0.3401, -0.4993, 0.4842, -0.0668, 0.2669, 0.6117, 0.1275, -1.0052, -0.8249, -0.0087, -0.0903, 0.2451, 0.0630, 0.0691, 0.2490, -0.2380, -1.1138, -0.9300, -0.1768, 0.0028, 0.1042, 0.1113, 0.0157, 0.0216, -0.2954, -1.1998, -1.0503, -0.3257, 0.1164, -0.0721, 0.0530, -0.1379, -0.2053, -0.2888, -1.2885, -1.1349, -0.4506, 0.3362, -0.2320, -0.0390, -0.3798, -0.4370, -0.3957, -1.3676, -1.0757, -0.4461, 0.6602, -0.1797, 0.0176, -0.5379, -0.6071, -0.8788, -1.3948, -0.9573, -0.9307, 0.9192, -0.8161, 0.0787, -0.9582, -0.7463, -0.8491, -1.3585, -0.7580, -1.2908, 1.1697, -1.2197, 0.1573, -1.3518, -1.1678, -0.7240, -1.2573, -0.5574, -1.5270, 1.4021, -1.4424, 0.2058, -1.6970, -1.6041, -0.7790, -1.1123, -0.4440, -1.7095, 1.6112, -1.6228, 0.1835, -1.9928, -1.7496, -1.2628, -0.9463, -0.4182, -2.1838, 2.0139, -1.7490, 0.3444, -2.1660, -1.8698, -1.9600, -0.7019};
float positive1[270] = { -1.1576, -0.5360, 0.6120, -0.6389, -0.9585, -0.5755, -0.2087, -0.6020, 1.2628, -1.1869, -0.4874, 0.6002, -0.4258, -0.9361, -0.6515, -0.2067, -0.6143, 1.2310, -1.2099, -0.2925, 0.4496, -0.2931, -0.9610, -0.4144, -0.2041, -0.4549, 1.2313, -1.2130, -0.1672, 0.3192, -0.2853, -0.9916, -0.2472, -0.1081, -0.4084, 1.2484, -1.1913, -0.2329, 0.2845, -0.4010, -0.9883, -0.4105, 0.1334, -0.6425, 1.2638, -1.1755, 0.0149, -0.1739, -0.4396, -0.9325, -0.3015, 0.3419, -0.5102, 1.2638, -1.0515, 0.0510, -0.4846, -0.4835, -0.8044, 0.0260, 0.7920, -0.2073, 1.2363, -0.9485, 0.2074, -0.7072, -0.6146, -0.6915, 0.5489, 1.3277, 0.2984, 1.2243, -0.8446, 0.9596, -0.9252, -0.2382, -0.5449, 1.3365, 1.8131, 1.0856, 1.2053, -0.5934, 3.1711, -1.2911, 2.0954, -0.1860, 2.5632, 2.0443, 2.3103, 1.0944, 0.1148, 2.0468, -1.8745, 2.0238, 0.2324, 1.7280, 0.6459, 1.8477, 0.7585, 0.4690, 1.1059, -1.7894, 1.5797, 0.4498, 1.1030, -0.0142, 1.3499, 0.5147, 0.6234, 0.6425, -1.4935, 1.1205, 0.5362, 0.8631, -0.0596, 1.0122, 0.3240, 0.7868, 0.6340, -1.3927, 0.8225, 0.6041, 0.9522, 0.2232, 0.8509, 0.1285, 1.0095, 0.4133, -0.5070, 0.2898, 0.9208, 0.6792, 0.8774, 0.2245, -0.0591, 1.0966, 0.3854, -0.3590, 0.4182, 1.0823, 0.4330, 0.8079, 0.2485, -0.3746, 1.1753, 0.2665, -0.4261, 0.9388, 1.2169, 0.2699, 0.5433, 0.4625, -0.6091, 1.2476, 0.0924, -0.5074, 1.2978, 1.3416, 0.1986, 0.3563, 0.3724, -0.7375, 1.1911, 0.2445, -0.5781, 0.2533, 1.3750, 0.1861, 0.4626, -0.9085, -0.8996, 1.2554, -0.1014, 0.3271, -0.9561, 1.3656, -0.2927, 0.5516, -1.8088, -1.0695, 1.2789, -0.3404, 0.7258, -0.9618, 1.3781, -0.5001, 0.3132, -1.7447, -1.1697, 1.2732, -0.4682, 0.7203, -0.3133, 1.3542, -0.5459, -0.0725, -1.0198, -1.2087, 1.2535, -0.5146, 0.5975, 0.2044, 1.2133, -0.5703, -0.3780, -0.0640, -1.2087, 1.0034, -0.0242, 0.5923, 0.0306, 0.7345, 0.2821, -0.6122, 0.8468, -1.2087, 0.4287, -0.1690, 0.4288, 0.2975, 0.0527, 0.2791, -0.6579, 0.8913, -1.1628, -0.2030, -0.5626, 0.4067, 0.2502, -0.6315, -0.1934, -1.0174, 0.5791, -1.1113, -0.7045, -1.0173, 0.7671, -0.3112, -1.1570, -0.9152, -1.6616, 0.0547, -1.0408, -0.8424, -1.4637, 1.8774, -1.0065, -1.2809, -1.7196, -1.8219, -0.9222, -0.8532, -0.8884, -1.8177, 1.9033, -1.8705, -1.3555, -1.9075, -2.0899, -1.1281, -0.7041, -0.9971, -2.0401, 1.8977, -2.3830, -1.4380, -2.2039, -2.1210, -1.3992, -0.5696 };
float positive2[270] = { -1.0338, 0.0334, 0.2557, 0.3389, -0.9288, -0.1110, 0.0270, 0.0335, 1.0609, -1.0452, -0.4973, -0.2302, -0.0520, -0.8787, -0.3044, -0.4830, -0.0391, 1.1147, -1.0365, -0.3312, -0.3545, -0.0706, -0.8539, -0.2962, -0.0971, -0.2032, 1.1040, -1.0259, -0.4493, -0.5178, -0.0892, -0.8474, -0.2885, -0.1227, 0.2995, 1.1040, -0.9726, -0.1181, -0.0858, 0.5436, -0.8665, -0.3918, -0.1470, -0.3293, 1.1040, -0.9326, 0.3054, -0.4361, 0.8186, -0.6523, 0.5134, 0.3131, 0.4619, 1.1147, -0.9328, 0.5115, 0.2859, 0.4878, -0.5530, 0.2346, 1.1311, 0.2166, 1.0932, -0.9695, 0.5111, 0.9099, 0.2644, -0.5604, -0.1054, 1.4841, 0.0438, 1.0932, -0.8632, 0.5570, -0.6672, 1.1350, -0.5555, 0.5061, 0.5383, 1.2617, 1.1040, -0.7258, 0.9404, -1.0037, 1.4969, -0.5502, 1.3122, 0.4506, 2.0511, 1.0824, -0.3545, 1.7502, -1.9731, 1.8340, -0.1948, 1.9095, 0.3557, 2.1479, 0.9854, 0.4994, 0.8202, -1.6566, 1.3563, 0.5009, 1.0258, -0.0071, 1.1839, 0.5866, 0.8529, 0.8457, -1.3791, 0.5188, 0.7616, 0.9413, 0.4178, 0.5517, 0.3927, 0.9899, 0.7364, -0.8254, -0.3125, 0.7518, 0.6561, 0.3739, 0.0335, 0.1663, 1.1027, 1.2187, -0.7978, -0.2939, 1.0771, 0.9979, 1.6204, 0.1026, -0.3941, 1.0877, 1.2082, -0.7651, -0.0168, 1.0393, 1.1510, 1.6277, 0.0870, -0.5989, 1.1551, 1.0827, -0.8204, 0.4567, 1.0657, 0.9177, 1.6350, 0.1907, -0.8467, 1.1999, 0.5182, -0.5316, 0.4712, 1.3186, 0.6694, 1.2540, 0.2200, -1.0084, 1.4229, 0.2203, 0.2708, -0.1161, 1.3154, 0.1189, 0.4957, 0.0525, -1.3102, 1.5293, -0.1510, 0.2658, -0.1450, 1.4532, -0.2169, 0.2060, 0.2684, -1.3317, 1.6013, -0.2962, 0.2620, -0.1740, 1.7891, -0.3189, -0.3296, -0.3656, -1.3856, 1.4296, -0.2933, 0.2658, 0.0018, 1.5727, -0.2525, -0.4940, -0.2447, -1.3641, 1.0341, 0.3263, 0.2708, 0.1279, 1.1348, 0.4396, -0.4976, 0.5241, -1.3533, 0.0431, 0.0313, 0.1164, 0.5663, -0.1176, 0.0292, -0.5013, 0.3047, -1.2886, -0.0809, -0.4789, 0.7442, -0.0499, -0.3713, -0.4300, -1.0868, -0.4451, -1.2024, -0.3516, -1.0184, 1.3344, -2.0641, -0.8438, -0.6881, -1.4970, -0.8735, -0.9976, -0.6842, -1.6250, 1.3243, -2.5170, -1.1748, -1.7044, -1.5834, -1.4677, -0.6096, -0.8208, -1.6058, 1.6608, -2.3619, -1.3114, -1.7717, -1.7234, -1.5921, -0.2540, -1.0290, -2.1461, 2.0388, -1.2762, -1.3585, -1.9591, -1.6711, -1.5385, 0.0909, -1.0890, -2.6063, 2.0388, -0.8792, -1.1613, -2.5838, -1.6893, -2.9361, 0.7483 };
float positive3[270] = { -1.0296, -0.2877, 0.3810, -0.3360, -0.7931, -0.3009, -0.0253, -0.4355, 1.3128, -1.0605, -0.2178, 0.3471, -0.1419, -0.7778, -0.3244, -0.0233, -0.4244, 1.2810, -1.0804, 0.0303, 0.1376, -0.0567, -0.8274, 0.0184, -0.0205, -0.1763, 1.3003, -1.0604, -0.0360, 0.1307, -0.1583, -0.8334, -0.1105, 0.1946, -0.4111, 1.3195, -1.0421, 0.1083, -0.1883, -0.2164, -0.7921, -0.0861, 0.4022, -0.3878, 1.3247, -0.9500, 0.2081, -0.5338, -0.2562, -0.6850, 0.1366, 0.7534, -0.1399, 1.3040, -0.8259, 0.3011, -0.7644, -0.3530, -0.5576, 0.5523, 1.2537, 0.3150, 1.2822, -0.7327, 0.8680, -0.9594, -0.1824, -0.4286, 1.2028, 1.7393, 1.0639, 1.2711, -0.4699, 2.9359, -1.3107, 2.0223, -0.0590, 2.2759, 1.9590, 2.2975, 1.1461, 0.2808, 1.8209, -1.8750, 1.9083, 0.3731, 1.5085, 0.5982, 1.7968, 0.7625, 0.5808, 1.0051, -1.6779, 1.4512, 0.5597, 1.0137, 0.1114, 1.3075, 0.5090, 0.7438, 0.7191, -1.4772, 1.0743, 0.6352, 0.9086, 0.1624, 1.0396, 0.2920, 0.9354, 0.6450, -1.1293, 0.7189, 0.7906, 0.8809, 0.5489, 0.7210, 0.0747, 1.1338, 0.4827, -0.4518, 0.3679, 1.0777, 0.6479, 1.0029, 0.2498, -0.1718, 1.1868, 0.5050, -0.4997, 0.6568, 1.2011, 0.4387, 0.7523, 0.4497, -0.5658, 1.2986, 0.2603, -0.5805, 1.3517, 1.3548, 0.3625, 0.4998, 0.6809, -0.7003, 1.2723, 0.3281, -0.6508, 0.6883, 1.4121, 0.3390, 0.5329, -0.3169, -0.8737, 1.2975, 0.1599, -0.0941, -0.4024, 1.4171, 0.0562, 0.6229, -1.3515, -1.0622, 1.3398, -0.1099, 0.4767, -0.7911, 1.4213, -0.2157, 0.4996, -1.6001, -1.2015, 1.3338, -0.2374, 0.4925, -0.1638, 1.4142, -0.2508, 0.1202, -0.9115, -1.2533, 1.3180, -0.2909, 0.3723, 0.3387, 1.2762, -0.2878, -0.1715, 0.0522, -1.2533, 1.0565, 0.1676, 0.3673, 0.1745, 0.7831, 0.4579, -0.3940, 0.9696, -1.2533, 0.4212, -0.0272, 0.1951, 0.4683, 0.0602, 0.3804, -0.4196, 0.9272, -1.1963, -0.2244, -0.4149, 0.2392, 0.2717, -0.6227, -0.0999, -0.8880, 0.5777, -1.1416, -0.6223, -0.8375, 0.8252, -0.3008, -1.0259, -0.7554, -1.3470, -0.1025, -1.0182, -0.7379, -1.2291, 1.5809, -1.0051, -1.1383, -1.2984, -1.5298, -0.8552, -0.8197, -0.7853, -1.5367, 1.5051, -1.7947, -1.2114, -1.4245, -1.7659, -0.9985, -0.6578, -0.9463, -1.6734, 1.5500, -2.0608, -1.3049, -1.7789, -1.6481, -1.3643, -0.5137, -1.2548, -1.7150, 1.7424, -1.7202, -1.3347, -1.9759, -1.7122, -1.4178, 0.0385, -1.3764, -1.9318, 1.8496, -1.5532, -1.3843, -2.2709, -1.8085, -1.5553, 0.4642 };
float negative1[270] = { 1.2995, -0.1794, -0.1563, 0.2364, -0.3786, 0.0817, -0.4355, 0.0552, -0.5277, 1.1573, -0.3648, -0.2614, 0.2638, -0.5166, -0.0439, -0.9999, 0.0297, -1.6874, 0.7607, -0.5834, -0.4213, -0.1659, -0.5667, 0.1779, -1.2200, 0.0255, -0.5277, 0.1847, 0.6601, -1.4066, -1.3508, -0.7967, 0.9050, -0.0692, 1.7768, 0.0437, 0.0416, 1.7157, -1.9145, -1.4565, -1.1303, 1.9052, 0.8375, 1.7069, -1.4353, 0.3833, 2.3487, -1.5175, -1.1562, -1.1920, 2.4365, 0.7424, 0.9956, 2.0101, 1.0319, 1.2780, -0.9180, -1.3895, -1.1915, 0.8510, -0.1328, -1.1087, -0.3092, 0.5291, -0.7696, -0.2613, -1.7626, -1.3068, -0.1875, -0.0847, -2.2721, -0.3092, 0.4305, -1.7838, 1.3026, -2.0475, -1.8290, -1.2853, 0.3720, -2.9427, -0.3092, 0.8758, -2.3598, 1.0576, 1.4257, -1.9936, -1.7914, -1.0876, -0.4980, -0.3092, 0.3964, -1.2859, 1.1300, 2.3501, -1.5918, -1.5799, -0.3366, 0.6298, 0.8336, -0.7047, 0.7116, 1.2035, 1.8736, -0.9357, -1.3288, 0.5395, 0.8216, 1.8925, -2.0364, 1.2986, 1.1170, 1.1728, -0.1392, -0.9938, 1.5262, 0.5288, 0.3798, -1.1135, 1.2218, 1.4067, 0.1646, 0.8346, -0.7811, 1.5177, -0.7512, -1.4857, 0.2844, 0.4884, 1.2821, -0.2650, 1.1030, -0.5714, 0.4964, -1.1277, -1.5194, 1.3166, 1.1640, 0.4769, 0.9749, 1.2370, -0.6086, 0.1046, -0.5454, 0.3630, 0.6861, -0.0836, 0.5067, 0.2660, 1.1995, -0.3775, 0.3587, -0.0258, -0.6286, -0.9360, 0.1242, 0.8518, 0.6215, 1.2461, -0.9182, 0.7573, 0.7955, 0.2454, -2.0849, -0.3915, 1.0259, -0.4236, 1.0234, -0.7647, 1.2359, -0.5622, -0.0908, -2.0826, 0.0464, 0.7734, -0.4471, 0.6926, -0.4148, 1.4460, -0.8626, -0.9983, -1.4222, -0.2015, 0.1496, -0.2426, 0.6558, 0.0189, 0.0996, 0.2677, -0.3092, -0.9237, -0.6352, -0.4150, 0.2305, 0.7931, 0.3785, -0.4047, 0.6574, 0.5983, -0.5051, -0.2599, -0.2644, 0.3501, 0.6072, 0.1148, -0.2715, 0.1491, 1.0689, -0.3853, 0.1787, 0.2322, -0.2249, 0.6561, -0.1145, 0.7778, -0.2872, 0.3294, -0.1078, 0.3306, 0.3400, -0.3052, 0.7502, 0.0344, 1.0319, -0.1297, -0.3092, -0.0419, -0.0010, -0.1056, 0.0989, 0.7866, 0.2522, 0.1921, 0.3924, 0.1445, 0.2677, -0.6819, -1.0791, 0.4742, 0.6105, 1.0470, -1.5813, 0.7436, 2.3463, 0.5373, -0.8104, -1.6306, 0.5884, 0.6147, 1.3366, -2.3637, 0.9426, 0.1782, 0.9420, -0.7411, -1.5655, 0.2131, 0.4814, 1.2974, -1.9805, 0.4684, 1.2034, 1.2193, -0.4340, -0.9388, -0.0671, 0.2763, 0.9244, -1.0675, 0.1267, -0.8807 };
float negative2[270] = { 1.4063, -0.5614, -0.2738, -0.4168, 1.2938, -0.2009, 0.0417, -1.3234, 0.5988, 1.4918, -1.2494, 0.1077, -0.7180, 1.3266, -0.2022, 0.1917, -1.0712, -0.4790, 1.5437, -0.9427, 0.7832, -0.6445, 1.1509, -1.0021, 0.2099, -0.5576, -1.1280, 1.5718, 0.4171, 1.5971, -0.0892, 0.7781, -2.3900, 0.0620, 0.2064, -0.8730, 1.5411, 1.0156, 1.5365, -0.1938, 0.6597, -1.2544, -0.2073, 0.7843, 1.6997, 1.4162, 1.4657, 1.3052, -0.2617, 0.5797, -1.1828, 0.2093, 0.9562, 0.2047, 1.2431, 1.1952, 0.6921, -0.0255, 0.4657, -1.0589, 0.1636, 0.9562, -1.4351, 1.0515, -0.5652, -0.6226, 0.8640, 0.2380, 0.2029, -1.5866, 0.9562, 0.4945, 0.6366, -0.9801, -1.4220, 0.0395, 0.4993, 2.2913, -0.6418, 0.9186, 0.6683, 0.0363, -1.0990, -0.7059, -0.2023, 0.7435, 1.7920, 0.9328, 0.6865, 0.6683, -0.5567, -1.0680, 1.0352, -0.0010, 0.9054, -0.7367, 2.4610, 0.1963, 0.7436, 0.0719, -1.0680, 0.0441, -1.8324, 0.9145, 0.4998, 1.0474, -0.8771, 1.3868, 0.2115, -0.6112, -0.0723, -1.8913, 0.9761, 0.2631, 0.4343, -1.2958, 0.6393, 0.1978, 0.0568, 0.0518, -1.2974, 0.9222, -0.2170, 0.1205, -1.1798, -0.2299, 0.2591, 0.7962, -0.0291, -0.7741, 0.5852, -0.0151, -0.2161, -0.4780, -0.2299, 0.2635, 0.6534, -0.7106, -0.1538, 0.6623, 0.7722, -0.2716, -0.6956, 0.3670, 0.0638, 0.5170, -0.9657, 0.3073, 0.1664, 1.1220, -0.6630, 0.0907, 0.6683, -0.2993, 0.5370, -0.8722, 0.6424, -0.8002, 0.9406, -1.2925, 1.5959, 0.4945, -0.5830, 1.1355, -1.2161, 1.1134, -1.3649, 0.0826, -1.4271, 1.6372, -0.7919, -0.9969, 0.3816, -1.5599, 2.0868, -1.7951, 0.6974, -1.4623, 1.6480, -1.6032, -1.3440, -0.8507, -1.7514, 2.3423, -1.9969, 1.3578, -1.3701, 1.2946, -2.0262, -1.4743, -2.0830, -1.6503, 0.8772, -1.8511, 1.1055, -1.1008, 0.2625, -2.0262, -1.0644, -1.3836, -0.7839, 1.8374, -1.5933, 0.5905, -1.0226, 0.8706, -0.2009, -0.9227, -0.3996, 0.2152, 0.8371, -1.2090, 0.2270, -0.5854, 0.5288, 0.6683, -1.0097, 0.4951, 1.1261, -1.3388, -0.7611, -0.1277, 0.2272, -0.5609, 0.5698, -1.0059, 0.1079, 1.1463, -0.5016, -0.5060, -1.1876, 1.4389, -1.0563, -0.0734, -1.0021, 1.3458, 1.2584, -0.2980, -0.4578, -0.7579, 1.6062, -0.8957, 1.2304, -0.9927, 2.0532, 1.1157, -0.1660, -0.4301, -0.3496, 1.3773, -0.8365, 1.5375, -0.9736, 0.8913, 0.4685, 0.2003, -0.3207, -0.8290, 1.0407, -1.3319, -1.0353, -0.7807, -0.2027, 0.1527, -0.3414, 0.2188, -0.4328, 0.2824, -1.4294, -0.5080 };
float negative3[270] = { -1.9703, 0.4221, 0.8061, -0.4066, 0.5887, -0.8795, 0.8316, -0.5777, -1.3096, -1.6469, -0.0905, 0.4322, -0.2026, 0.6362, -0.4900, 0.1906, 0.3324, -0.7930, -1.4076, -0.7440, 0.0276, 0.0969, 0.9027, -0.0855, -0.2291, 0.7222, -0.7142, -1.2173, -1.1064, -0.3125, 0.5504, 1.0346, 0.2060, -0.3902, 0.9687, -0.1538, -1.0522, -1.0567, -0.4787, 0.9894, 0.9486, 0.2651, -0.3668, 1.0059, 0.6342, -0.8758, -0.5405, -0.2768, 1.0109, 0.6338, -0.1088, -0.3434, 0.5052, 0.6342, -0.8184, -0.2254, 0.0104, 0.4519, 0.7066, -0.3148, 0.0677, 0.0288, 0.6342, -0.7726, 0.2702, 0.3296, -0.0213, 0.7331, -0.5148, 0.4517, -0.1264, -0.0137, -0.6978, 0.6598, 0.5371, -0.2646, 0.7755, -0.5608, 0.6827, -0.0593, -0.7142, -0.5606, 0.5791, 0.4745, -0.1785, 0.9444, -0.2779, 0.6561, 0.0800, -0.7230, -0.5633, 0.3317, 0.2631, 0.2348, 1.0959, -0.1643, 0.3356, 0.4675, -1.2396, -0.5013, -0.0895, -0.1167, 0.5525, 0.9767, 0.1248, -0.0092, 0.7497, 0.0826, -0.3903, -0.6873, -0.6726, 0.8753, 0.7650, 0.7072, -0.5917, 0.9821, 1.5186, -0.2492, -1.3716, -1.3507, 1.2388, 0.6024, 1.5375, -1.4342, 1.1944, 1.8251, -0.1353, -1.4494, -1.7199, 1.3999, 0.6558, 1.6960, -1.6394, 1.3207, 0.2752, -0.0653, -1.4314, -1.8490, 1.2488, 0.6147, 1.9123, -1.9450, 1.4227, -0.4515, 0.0901, -1.3664, -1.8121, 0.9098, 0.4632, 1.8873, -1.8126, 1.1268, 0.0476, 0.3099, -1.2569, -1.6302, 0.5070, 0.2249, 1.5954, -1.2653, 0.5419, 0.9232, 0.3742, -1.0554, -1.2879, 0.3137, -0.0037, 1.2940, -1.0006, 0.4635, -1.1433, 0.5041, -0.0282, -0.3212, 0.0117, -0.2821, 0.8303, -0.5566, 0.1740, -0.9331, 0.6539, 0.5295, 0.3822, -0.4101, -0.6048, -0.1290, 0.0920, -0.5203, 0.7743, 0.7863, 0.7581, 0.8619, -0.9820, -0.8610, -1.1876, 0.8397, -1.3744, 2.2366, 0.8497, 1.2495, 1.4267, -1.7496, -0.8640, -1.5772, 1.4969, -1.9144, 0.6868, 0.9131, 1.7649, 1.6013, -1.8171, -0.8784, -1.6925, 1.6861, -1.8949, 0.6342, 1.0888, 1.8487, 1.5860, -1.9487, -1.1759, -1.2677, 1.5519, -1.7319, -0.3902, 1.2714, 1.6668, 1.4309, -2.0112, -1.4292, -0.7812, 1.2961, -1.5148, -1.3884, 1.3642, 1.3890, 1.1646, -1.7896, -1.3727, -0.6817, 1.1057, -1.3164, -1.3884, 1.4900, 0.8092, 0.4925, -0.1365, -1.9250, -0.6974, 0.9239, -1.1553, -1.3884, 1.6001, 0.4377, 0.1546, 0.5560, -2.0123, -0.4488, 0.1150, -0.3187, 0.5379, 1.6283, -0.2165, -0.1529, 0.9707, -1.8939, -0.1964, -0.7394, 0.4181, 1.2997 };


void predictSample(const char *classLabel, float *input, uint8_t expectedOutput) {
    // classify class 0
    if (!tf.predict(input).isOk()) {
        extern HardwareSerial DebugSerial;
        DebugSerial.println(tf.exception.toString());
        return;
    }

    extern HardwareSerial DebugSerial;
    DebugSerial.print("Predicting sample of ");
    DebugSerial.print(classLabel);
    DebugSerial.print(": expcted id=");
    DebugSerial.print(expectedOutput);
    DebugSerial.print(", predicted=");
    DebugSerial.println(tf.classification);

}

void tinyMLExample() {
    predictSample("positive0", positive, 1);
    predictSample("positive1", positive1, 1);
    predictSample("positive2", positive2, 1);
    predictSample("positive3", positive3, 1);
    predictSample("negative1", negative1, 0);
    predictSample("negative2", negative2, 0);
    predictSample("negative3", negative3, 0);

    // how long does it take to run a single prediction?
    DebugSerial.print("It takes ");
    DebugSerial.print(tf.benchmark.microseconds());
    DebugSerial.println("us for a single prediction");

    delay(1000);
}


void initTinyML() {
    // Serial.begin(115200);
    // delay(3000);
    DebugSerial.println("__TENSORFLOW__");

    // configure input/output
    // (not mandatory if you generated the .h model
    // using the eloquent_tensorflow Python package)
    tf.setNumInputs(TF_NUM_INPUTS);
    DebugSerial.println("__INPUTS SET__");
    tf.setNumOutputs(TF_NUM_OUTPUTS);
    DebugSerial.println("__OUTPUTS SET__");

    registerNetworkOps(tf);
    DebugSerial.println("__NETWORKOPS SET__");

    while (!tf.begin(tfModel).isOk()) {
        DebugSerial.println(tf.exception.toString());
        delay(1000);
    }

    tinyMLExample();
}

float scaleValue(float x, float minVal, float maxVal, float targetMin, float targetMax) {
    return ((x - minVal) / (maxVal - minVal)) * (targetMax - targetMin) + targetMin;
}

std::vector<float> normalization(int16_t* data) {
    std::vector<float> scaledData(TINYML_BUFFER_LEN, 0.0f);

    float mean = 0;
    for (int i = 0; i < TINYML_BUFFER_LEN; i++) {
        mean += data[i];
    }
    mean /= TINYML_BUFFER_LEN;

    float variance = 0;
    for (int i = 0; i < TINYML_BUFFER_LEN; i++) {
        variance += pow((data[i] - mean), 2);
    }
    variance /= TINYML_BUFFER_LEN;  // Variance of the middle half

    float std = sqrt(variance);

    // Serial.println("");
    // Scale the data
    if (std > 0) {
        for (int i = 0; i < TINYML_BUFFER_LEN; i++) {
            scaledData[i] = (data[i] - mean)/std;
        }
    }
    // Serial.println("");
    return scaledData;
}

uint8_t tinyMLInference(tinyMLDataClass predictionInput) {
    uint8_t prediction = 0;

/// NOTE: need to check if these are correct in L or R
    std::vector<float> ADS3 = normalization(predictionInput.adsRBuffer);
    std::vector<float> IMU3_x = normalization(predictionInput.gyroRXBuffer);
    std::vector<float> IMU3_y = normalization(predictionInput.gyroRYBuffer);
    std::vector<float> IMU3_z = normalization(predictionInput.gyroRZBuffer);
    std::vector<float> ADS1 = normalization(predictionInput.adsLBuffer);
    std::vector<float> IMU1_x = normalization(predictionInput.gyroLXBuffer);
    std::vector<float> IMU1_y = normalization(predictionInput.gyroLYBuffer);
    std::vector<float> IMU1_z = normalization(predictionInput.gyroLZBuffer); 
    std::vector<float> TOF = normalization(predictionInput.tofBuffer);

    float flattenedInput[TINYML_BUFFER_LEN*9];
    int inputIndex = 0;

#ifdef ROW_WISE_FLATTENING
    for (int j = 0; j < TINYML_BUFFER_LEN; j++) {
        flattenedInput[inputIndex++] = ADS1[j];
        flattenedInput[inputIndex++] = IMU1_x[j];
        flattenedInput[inputIndex++] = IMU1_y[j];
        flattenedInput[inputIndex++] = IMU1_z[j];
        flattenedInput[inputIndex++] = ADS3[j];
        flattenedInput[inputIndex++] = IMU3_x[j];
        flattenedInput[inputIndex++] = IMU3_y[j];
        flattenedInput[inputIndex++] = IMU3_z[j];
        flattenedInput[inputIndex++] = TOF[j];
    }
#else
    for (int j = 0; j < TINYML_BUFFER_LEN; j++) {
        flattenedInput[inputIndex++] = ADS1[j];
    }
    for (int j = 0; j < TINYML_BUFFER_LEN; j++) {
        flattenedInput[inputIndex++] = IMU1_x[j];
    }
    for (int j = 0; j < TINYML_BUFFER_LEN; j++) {
        flattenedInput[inputIndex++] = IMU1_y[j];
    }
    for (int j = 0; j < TINYML_BUFFER_LEN; j++) {
        flattenedInput[inputIndex++] = IMU1_z[j];
    }
    for (int j = 0; j < TINYML_BUFFER_LEN; j++) {
        flattenedInput[inputIndex++] = ADS3[j];
        // Serial.printf("%f, ", ADS3[j]);
    }
    // Serial.println("");
    for (int j = 0; j < TINYML_BUFFER_LEN; j++) {
        flattenedInput[inputIndex++] = IMU3_x[j];
    }
    for (int j = 0; j < TINYML_BUFFER_LEN; j++) {
        flattenedInput[inputIndex++] = IMU3_y[j];
    }
    for (int j = 0; j < TINYML_BUFFER_LEN; j++) {
        flattenedInput[inputIndex++] = IMU3_z[j];
    }
    for (int j = 0; j < TINYML_BUFFER_LEN; j++) {
        flattenedInput[inputIndex++] = TOF[j];
    }
#endif

#ifdef PRINT_PREDICTION_DATA
    extern HardwareSerial DebugSerial;
    DebugSerial.println("------");
    for (int j=0; j<TINYML_BUFFER_LEN*9; j++) {
        DebugSerial.printf("%f, ", flattenedInput[j]);
    }
    DebugSerial.println("------");
#endif

    if (!tf.predict(flattenedInput).isOk()) {
        extern HardwareSerial DebugSerial;
        DebugSerial.printf("SOMETHING WRONG WITH MODEL INFERENCE");
        DebugSerial.println(tf.exception.toString());
        return 0;
    }
    prediction = tf.classification;
    extern HardwareSerial DebugSerial;
    DebugSerial.print("predicted=");
    DebugSerial.println(tf.classification);

    return prediction;
}
